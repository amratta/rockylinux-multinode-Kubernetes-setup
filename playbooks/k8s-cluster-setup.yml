#################################################################################
#Importnatant_Notes:                                                            #
#            - Don't change the names of groups in the ansible inventory file.  #
#            - leave hosts: all (don't change)                                  #
#################################################################################

   - hosts: all      
     roles:
       - etc-hosts       
       - prepare-nodes 
       - k8s-preinstall   
       - longhorn 
     vars_files:
       - vars.yml   
     tasks:
       - name: Configure ControPlane Node   
         block:
            - shell:
                cmd: "ip address show to {{ k8s_internal_network }} | grep inet  | awk -F' ' '{ print $2 }' | xargs ipcalc -p | awk -F'=' '{ print $2 }'"
              register: Prefix

            - shell:
                cmd: "ip address show to {{ k8s_internal_network }} | grep inet | sed -e 's/\\/{{ Prefix.stdout }}//g' | awk '{print $2}'"
              register: ControlPlane_Internal_IP
                 
            - shell:
                cmd: python3 -c "from passlib.hash import sha512_crypt; import getpass; print (sha512_crypt.encrypt( '{{ k8s_user_pass }}' ))"
              register: Pass_Hash

            - name: Add cluster admin user in controlplane node
              ansible.builtin.user:
                name: "{{ k8s_user_admin }}"
                password: "{{ Pass_Hash.stdout }}"
                shell: /bin/bash
                comment: user will manage kubernets
                update_password: on_create
 
            - name: Intialize kubeadmin without internal subnet 
              shell:
                cmd: kubeadm init --pod-network-cidr={{ Pods_CIDR }}  --apiserver-advertise-address={{ ansible_default_ipv4.address }}                    
              async: 3600
              poll: 600      
              when: 
                - use_k8s_network == false 
                - set_k8s_service_domain == false

            - name: Intialize kubeadmin with internal subnet
              shell:
                cmd: kubeadm init --pod-network-cidr={{ Pods_CIDR }} --apiserver-advertise-address={{ ControlPlane_Internal_IP.stdout }}
              async: 3600
              poll: 5
              when: 
                - use_k8s_network == true 
                - set_k8s_service_domain == false

            - name: Intialize kubeadmin without internal subnet 
              shell:
                cmd: kubeadm init --pod-network-cidr={{ Pods_CIDR }} --service-dns-domain={{ domain_name }} --apiserver-advertise-address={{ ansible_default_ipv4.address }}
              async: 3600
              poll: 5
              when:
                - use_k8s_network == false
                - set_k8s_service_domain == true

            - name: Intialize kubeadmin with internal subnet
              shell:
                cmd: kubeadm init --pod-network-cidr={{ Pods_CIDR }} --apiserver-advertise-address={{ ControlPlane_Internal_IP.stdout }} --service-dns-domain={{ domain_name }} 
              async: 3600
              poll: 5
              when:
                - use_k8s_network == true
                - set_k8s_service_domain == true
            
            - name: Download Tigera Custom Resource
              get_url:
                url: "{{ item.src }}"
                dest: "{{ item.dest }}"
              loop:
                - { src: '{{ Calico_Custom_Res_URL }} ', dest: "/k8s-multinodes-yamls/custom-resources.yml" }
                - { src: '{{ MetaLB_URL }}' , dest: "/k8s-multinodes-yamls/metallb-native.yml" }

            - name: edit pods CIDR for Calico Tigera
              lineinfile:
                path: "/k8s-multinodes-yamls/custom-resources.yml"
                regex: '^\s{1,}cidr: 192.168.0.0/16'
                line: '      cidr: {{ Pods_CIDR }}'
              when: Pods_CIDR != "192.168.0.0/16"   


            - name: Apply Calico Tigera network module
              shell:
                cmd: "{{ item }}"
              environment:
                - KUBECONFIG: /etc/kubernetes/admin.conf
              async: 3600
              poll: 10
              loop:
                - kubectl create -f "{{ Calico_Tigera_URL }}" 
                - kubectl apply -f /k8s-multinodes-yamls/custom-resources.yml
                - kubectl wait --for=condition=Ready pod --all=true --all-namespaces=true --timeout 60m

            - name: Get Join command    
              shell:
                 cmd: kubeadm token create --print-join-command
              register: join_command 

            - name: "Add Join command to dummy host"
              add_host:
                name: "k8s_command_holder"
                join_cmd: "{{ join_command.stdout }}"  
      
            - name: Show kuberentes join command
              debug:
                msg: "{{ hostvars['k8s_command_holder']['join_cmd'] }}"

         when: inventory_hostname in groups['control_nodes']
          
       - name: Join workernodes 
         shell:
            cmd: "{{ hostvars['k8s_command_holder']['join_cmd'] }}"
         async: 600
         poll: 10 
         when: inventory_hostname in groups['worker_nodes']
      
       - name: Control Plane Resources Block  
         block:    
           - name: upload yaml files 
             template:
               src: "{{ item.src }}"
               dest: "{{ item.dest }}"
             loop:
               - { src: "../templates/MetaLB-IP-Pool.j2", dest: "/k8s-multinodes-yamls/MetaLB-IP-Pool.yml" }
               - { src: "../files/verify.yml", dest: "/k8s-multinodes-yamls/verify.yml" }
               - { src: "../files/longhorn-ingress.yml", dest: "/k8s-multinodes-yamls/longhorn-ingress.yml" }
            
           - name: upload multus ipvlan      
             template:
               src: "../templates/multus-ipvlan.j2"
               dest: "/k8s-multinodes-yamls/multus.yml"
             when: 
               - use_macvlan == false
                 
           - name: upload multus 
             template:
               src: "../templates/multus-macvlan.j2"
               dest: "/k8s-multinodes-yamls/multus.yml"
             when:
               - use_macvlan == true 

           - name: Install Multus & Whereabouts Plugins
             block:
               - name: Clone git repos
                 ansible.builtin.git:
                   depth: 1
                   repo: "{{ item.repo }}"
                   dest: "{{ item.dest }}"
                 loop:
                   - { repo: "{{ Multus_URL }}" , dest: /tmp/multus-cni }
                   - { repo: "{{ Whereabouts_URL }}", dest: /tmp/Whereabouts }

               - name: Install Muluts & MetaLB
                 shell:
                   cmd: "{{ item }}"
                 environment:
                   - KUBECONFIG: /etc/kubernetes/admin.conf
                 async: 3600
                 poll: 10
                 loop:
                   - kubectl apply -f /k8s-multinodes-yamls/metallb-native.yml
                   - kubectl wait --for=condition=Ready pod --all=true --namespace metallb-system --timeout 60m  
                   - kubectl apply -f /k8s-multinodes-yamls/MetaLB-IP-Pool.yml
                   - kubectl apply -f /tmp/multus-cni/deployments/multus-daemonset-thick.yml 
                   - kubectl apply -f /k8s-multinodes-yamls/multus.yml 
                   - kubectl wait --for=condition=Ready pod --all=true --all-namespaces=true --timeout 60m
                 
               - name: Install Whereabouts
                 shell:
                   cmd: "{{ item }}"
                   chdir: /tmp/Whereabouts   
                 environment:
                   - KUBECONFIG: /etc/kubernetes/admin.conf
                 async: 3600
                 poll: 10
                 loop:
                   - kubectl apply -f doc/crds/daemonset-install.yaml 
                   - kubectl apply -f doc/crds/whereabouts.cni.cncf.io_ippools.yaml  
                   - kubectl apply -f doc/crds/whereabouts.cni.cncf.io_overlappingrangeipreservations.yaml 

           - name: Install Nginx Ingress Controller 
             block: 
               - name: Add nginx helm repo  
                 kubernetes.core.helm_repository:
                   name: ingress-nginx
                   repo_url: "{{ Nginx_Ingress_URL }}"

               - name: Install nginx ingress controller
                 kubernetes.core.helm:
                   name: ingress-nginx
                   chart_ref: ingress-nginx/ingress-nginx
                   release_namespace: ingress-nginx
                   create_namespace: true
   
               - name: Create private key (RSA, 4096 bits)
                 community.crypto.openssl_privatekey:
                   path: /tmp/longhorn.key

               - name: Create simple self-signed certificate
                 community.crypto.x509_certificate:
                   path: /tmp/longhorn.pem
                   privatekey_path: /tmp/longhorn.key
                   provider: selfsigned

           - name: Install longhorn 
             shell:
               cmd: "{{ item }}"
             environment:
                  - KUBECONFIG: /etc/kubernetes/admin.conf
                  - USER: "{{ longhorn_ui_user }}"
                  - PASSWORD: "{{ longhorn_ui_password }}"   
             async: 3600
             poll: 10     
             loop:
               - kubectl apply -f "{{ Longhorn_URL }}" 
               - sleep 20     
               - kubectl wait --for=condition=Ready pod --all=true --namespace longhorn-system --timeout 60m 
               - sleep 20  
               - kubectl wait --for=condition=Ready pod --all=true --namespace longhorn-system --timeout 60m
               - echo "${USER}:$(openssl passwd -stdin -apr1 <<< ${PASSWORD})" > /tmp/auth 
               - kubectl -n longhorn-system create secret generic longhorn-auth --from-file=/tmp/auth
               - kubectl apply -f "{{ LonghornRWX_URL }}"
                 
           - name: Configure LongHorn storage network
             block:
               - shell:
                   cmd: kubectl get settings storage-network -o yaml -n longhorn-system > /tmp/storage-network.yml

               - ansible.builtin.lineinfile:
                    path: /tmp/storage-network.yml
                    regexp: '^value:*'
                    line: "value: kube-system/longhorn-sn"

               - shell:
                   cmd: kubectl apply -f /tmp/storage-network.yml
                 environment:
                  - KUBECONFIG: /etc/kubernetes/admin.conf
                 async: 3600
                 poll: 10
             when:
                - set_network_storage     

           - name: Ingress and verify installation yamls
             shell:
               cmd: "{{ item }}"
             environment:
               - KUBECONFIG: /etc/kubernetes/admin.conf
             async: 3600
             poll: 10
             loop:
               - kubectl apply -f /k8s-multinodes-yamls/longhorn-ingress.yml
               - kubectl apply -f /k8s-multinodes-yamls/verify.yml

           - name: Enable kubernets & Helm auto-completion  
             shell:
               cmd: "{{ item }}" 
             loop:
               - "kubectl completion bash | tee /etc/bash_completion.d/kubectl > /dev/null"
               - "helm completion bash > /etc/bash_completion.d/helm"
             environment:
               - KUBECONFIG: /etc/kubernetes/admin.conf

           - name: confgure kubectl for admin user
             ansible.builtin.file:
               path: "{{ Default_Home_Path }}/{{ k8s_user_admin }}/.kube"
               owner: "{{ k8s_user_admin }}"
               group: "{{ k8s_user_admin }}"
               state: directory
               mode: '0770'
    
           - name: configure kubectl for admin user 
             ansible.builtin.copy:
               src: "/etc/kubernetes/admin.conf"
               dest: "{{ Default_Home_Path }}/{{ k8s_user_admin }}/.kube/config"
               owner: "{{ k8s_user_admin }}"
               group: "{{ k8s_user_admin }}"
               remote_src: yes
               mode: '0770'
    
           - name:  configure kubectl for admin user
             ansible.builtin.lineinfile:
              path: "{{ Default_Home_Path }}/{{ k8s_user_admin }}/.bashrc"
              line: "export KUBECONFIG=~/.kube/config"
               
         when: inventory_hostname in groups['control_nodes']

       - name: Remove Docker Authtoken
         block:
           - name: Remove Docker authentication
             ansible.builtin.lineinfile:
               path: /etc/containerd/config.toml
               regex: "{{ item }}"
               state: absent
             loop:
               - '^(\s+)\[plugins."io.containerd.grpc.v1.cri".registry.configs."{{ Docker_Registry }}".auth]'
               - '^(\s+)auth = "{{ dockerhub_token }}"'
                 
           - name: Restart Containerd
             ansible.builtin.service:
               name: "containerd"
               state: restarted
               enabled: yes
         when:
           - bootstrap_only == true
           - dockerhub_auth == true

